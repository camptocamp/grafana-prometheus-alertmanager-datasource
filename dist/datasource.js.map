{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","silenced","jsonData","severityLevels","severity_critical","toLowerCase","severity_high","severity_warning","severity_info","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","labelSelector","parseLabelSelector","encodeURIComponent","replace","expr","scopedVars","datasourceRequest","method","headers","then","results","response","columnsDict","getColumnsDict","columns","getColumns","i","row","Array","fill","item","Date","parse","Object","keys","label","annotation","rows","push","now","text","column","input","map","trim","split","index","labelIndex","selectedLabel","status","message","title","target","targetss","refId","legendFormat","labels","JSON","stringify","aliasRegex","match","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.silenced = instanceSettings.jsonData.silenced;\n    this.severityLevels = {}\n    this.severityLevels[instanceSettings.jsonData.severity_critical.toLowerCase()]  = 4;\n    this.severityLevels[instanceSettings.jsonData.severity_high.toLowerCase()]      = 3;\n    this.severityLevels[instanceSettings.jsonData.severity_warning.toLowerCase()]   = 2;\n    this.severityLevels[instanceSettings.jsonData.severity_info.toLowerCase()]      = 1;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n    query(options) {\n        let query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n        // Format data for table panel\n        if(query.targets[0].type === \"table\"){\n            var labelSelector = this.parseLabelSelector(query.targets[0].labelSelector);\n            let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars) || \"\");\n            return this.backendSrv.datasourceRequest({\n                    url: `${this.url}/api/v1/alerts?silenced=${this.silenced}&inhibited=false&filter=${filter}`,\n                    data: query,\n                    method: 'GET',\n                    headers: { 'Content-Type': 'application/json' }\n                }).then(response => {\n                    let results = {\n                        \"data\": [{\n                            \"rows\": [],\n                            \"columns\": [],\n                            \"type\": \"table\"\n                            }\n                        ]\n                    };\n\n                if(response.data && response.data.data && response.data.data.length) {\n                    let columnsDict = this.getColumnsDict(response.data.data, labelSelector);\n                    results.data[0].columns = this.getColumns(columnsDict);\n\n                    for (let i = 0; i < response.data.data.length; i++) {\n                        let row = new Array(results.data[0].columns.length).fill(\"\");\n                        let item = response.data.data[i];\n                        row[0] = [Date.parse(item['startsAt'])];\n\n                        for (let label of Object.keys(item['labels'])) {\n                            if(label in columnsDict) {\n                                if(label === 'severity') {\n                                    row[columnsDict[label]] = this.severityLevels[item['labels'][label]]\n                                }\n                                else {\n                                    row[columnsDict[label]] = item['labels'][label];\n                                }\n\n                            }\n                        }\n                        for (let annotation of Object.keys(item['annotations'])) {\n                            if(annotation in columnsDict) {\n                                row[columnsDict[annotation]] = item['annotations'][annotation];\n                            }\n                        }\n                        results.data[0].rows.push(row);\n                    }\n                }\n                return results;\n            });\n        } else {\n            let filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars) || \"\");\n                return this.backendSrv.datasourceRequest({\n                url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\n                data: query,\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json' }\n            }).then(response => {\n                return {\n                    \"data\": [{ \"datapoints\": [ [response.data.data.length, Date.now()] ]}]\n                }\n            });\n        }\n    }\n\n    getColumns(columnsDict) {\n        let columns =  [{ text: \"Time\", type: \"time\" }];\n        for(let column of Object.keys(columnsDict)) {\n            columns.push({ text: column, type: \"string\" })\n        }\n        return columns;\n    }\n\n    // Parses the label list into a map\n    parseLabelSelector(input) {\n        var map;\n        if (typeof(input) === \"undefined\" || input.trim().length === 0) {\n            map = [\"*\"];\n        } else {\n            map = input.trim().split(/\\s*,\\s*/);\n        }\n        return map;\n    }\n\n    // Creates a column index dictionary in to assist in data row construction\n    getColumnsDict(data, labelSelector) {\n        let index = 1; // 0 is the data column\n        let columnsDict = {};\n        for (let i = 0; i < data.length; i++) {\n            for (let labelIndex = 0; labelIndex < labelSelector.length; labelIndex++) {\n                var selectedLabel = labelSelector[labelIndex];\n                if (selectedLabel === \"*\") {\n                    // '*' maps to all labels/annotations not already added via the label selector list\n                    for (let label of Object.keys(data[i]['labels'])) {\n                        if(!(label in columnsDict) && label !== 'severity') {\n                            columnsDict[label] = index++;\n                        }\n                    }\n                    for (let annotation of Object.keys(data[i]['annotations'])) {\n                        if(!(annotation in columnsDict)) {\n                            columnsDict[annotation] = index++;\n                        }\n                    }\n                } else if (!(selectedLabel in columnsDict)) {\n                    columnsDict[selectedLabel] = index++;\n                }\n            }\n        }\n        columnsDict['severity'] = index;\n        return columnsDict;\n    }\n\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/status',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n          options.targets = _.filter(options.targets, target => {\n          return target.target !== 'select metric';\n        });\n          options.targetss = _.map(options.targets, target => {\n          return {\n            target: this.templateSrv.replace(target.target),\n            expr: target.expr,\n            refId: target.refId,\n            hide: target.hide,\n            type: target.type || 'single',\n            legendFormat: target.legendFormat || \"\"\n          };\n        });\n        return options;\n      }\n\n    formatInstanceText(labels, legendFormat){\n    if(legendFormat === \"\"){\n      return JSON.stringify(labels);\n    }\n    let aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return legendFormat.replace(aliasRegex, function(match, g1) {\n      if (labels[g1]) {\n        return labels[g1];\n      }\n      return \"\";\n    });\n  }\n}\n"]}